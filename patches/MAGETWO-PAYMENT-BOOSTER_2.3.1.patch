diff --git a/vendor/magento/module-sales/Model/ResourceModel/EntityAbstract.php b/vendor/magento/module-sales/Model/ResourceModel/EntityAbstract.php
index 8061227..acb4548 100644
--- a/vendor/magento/module-sales/Model/ResourceModel/EntityAbstract.php
+++ b/vendor/magento/module-sales/Model/ResourceModel/EntityAbstract.php
@@ -122,7 +122,7 @@ abstract class EntityAbstract extends AbstractDb
     protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)
     {
         /** @var \Magento\Sales\Model\AbstractModel $object */
-        if ($object instanceof EntityInterface && $object->getIncrementId() == null) {
+        if ($object instanceof EntityInterface && $object->getEntityId() == null && $object->getIncrementId() == null) {
             $store = $object->getStore();
             $storeId = $store->getId();
             if ($storeId === null) {

diff --git a/vendor/magento/module-sales-rule/view/frontend/web/js/action/select-payment-method-mixin.js b/vendor/magento/module-sales-rule/view/frontend/web/js/action/select-payment-method-mixin.js
new file mode 100644
--- /dev/null
+++ b/vendor/magento/module-sales-rule/view/frontend/web/js/action/select-payment-method-mixin.js
@@ -0,0 +1,32 @@
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+define([
+    'jquery',
+    'mage/utils/wrapper',
+    'Magento_Checkout/js/model/quote',
+    'Magento_SalesRule/js/model/payment/discount-messages',
+    'Magento_Checkout/js/action/set-payment-information',
+    'Magento_Checkout/js/action/get-totals'
+], function ($, wrapper, quote, messageContainer, setPaymentInformationAction, getTotalsAction) {
+    'use strict';
+
+    return function (selectPaymentMethodAction) {
+
+        return wrapper.wrap(selectPaymentMethodAction, function (originalSelectPaymentMethodAction, paymentMethod) {
+
+            originalSelectPaymentMethodAction(paymentMethod);
+
+            $.when(
+                setPaymentInformationAction(
+                    messageContainer,
+                    {
+                        method: paymentMethod.method
+                    }
+                )
+            );
+        });
+    };
+
+});

===================================================================

diff --git a/vendor/magento/module-sales-rule/view/frontend/requirejs-config.js b/vendor/magento/module-sales-rule/view/frontend/requirejs-config.js
new file mode 100644
--- /dev/null
+++ b/vendor/magento/module-sales-rule/view/frontend/requirejs-config.js
@@ -0,0 +1,14 @@
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+var config = {
+  config: {
+    mixins: {
+      'Magento_Checkout/js/action/select-payment-method': {
+        'Magento_SalesRule/js/action/select-payment-method-mixin': true
+      }
+    }
+  }
+};


diff --git a/vendor/magento/module-quote/Model/QuoteManagement.php b/vendor/magento/module-quote/Model/QuoteManagement.php
index 6ed8393..4ec442c 100644
--- a/vendor/magento/module-quote/Model/QuoteManagement.php
+++ b/vendor/magento/module-quote/Model/QuoteManagement.php
@@ -248,6 +248,8 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
         $storeId = $this->storeManager->getStore()->getStoreId();
         $quote = $this->createCustomerCart($customerId, $storeId);

+        $this->_prepareCustomerQuote($quote);
+
         try {
             $this->quoteRepository->save($quote);
         } catch (\Exception $e) {
@@ -563,7 +565,14 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
         if ($shipping && !$shipping->getSameAsBilling()
             && (!$shipping->getCustomerId() || $shipping->getSaveInAddressBook())
         ) {
-            $shippingAddress = $shipping->exportCustomerAddress();
+            if ($shipping->getQuoteId()) {
+                $shippingAddress = $shipping->exportCustomerAddress();
+            } else {
+                $defaultShipping = $this->customerRepository->getById($customer->getId())->getDefaultShipping();
+                if ($defaultShipping) {
+                    $shippingAddress = $this->addressRepository->getById($defaultShipping);
+                }
+            }
             if (!$hasDefaultShipping) {
                 //Make provided address as default shipping address
                 $shippingAddress->setIsDefaultShipping(true);
@@ -583,7 +592,14 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface
         }

         if (!$billing->getCustomerId() || $billing->getSaveInAddressBook()) {
-            $billingAddress = $billing->exportCustomerAddress();
+            if ($billing->getQuoteId()) {
+                $billingAddress = $billing->exportCustomerAddress();
+            } else {
+                $defaultBilling = $this->customerRepository->getById($customer->getId())->getDefaultBilling();
+                if ($defaultBilling) {
+                    $billingAddress = $this->addressRepository->getById($defaultBilling);
+                }
+            }
             if (!$hasDefaultBilling) {
                 //Make provided address as default shipping address
                 if (!$hasDefaultShipping) {

diff --git a/vendor/magento/module-checkout/Model/Session.php b/vendor/magento/module-checkout/Model/Session.php
index 618f745e771..0addbf069cb 100644
--- a/vendor/magento/module-checkout/Model/Session.php
+++ b/vendor/magento/module-checkout/Model/Session.php
@@ -291,6 +291,7 @@ class Session extends \Magento\Framework\Session\SessionManager
                     }
                 } else {
                     $quote->setIsCheckoutCart(true);
+                    $quote->setCustomerIsGuest(1);
                     $this->_eventManager->dispatch('checkout_quote_init', ['quote' => $quote]);
                 }
             }
@@ -382,8 +383,10 @@ class Session extends \Magento\Framework\Session\SessionManager

         if ($customerQuote->getId() && $this->getQuoteId() != $customerQuote->getId()) {
             if ($this->getQuoteId()) {
+                $quote = $this->getQuote();
+                $quote->setCustomerIsGuest(0);
                 $this->quoteRepository->save(
-                    $customerQuote->merge($this->getQuote())->collectTotals()
+                    $customerQuote->merge($quote)->collectTotals()
                 );
                 $newQuote = $this->quoteRepository->get($customerQuote->getId());
                 $this->quoteRepository->save(
@@ -402,6 +405,7 @@ class Session extends \Magento\Framework\Session\SessionManager
             $this->getQuote()->getBillingAddress();
             $this->getQuote()->getShippingAddress();
             $this->getQuote()->setCustomer($this->_customerSession->getCustomerDataObject())
+                ->setCustomerIsGuest(0)
                 ->setTotalsCollectedFlag(false)
                 ->collectTotals();
             $this->quoteRepository->save($this->getQuote());

diff --git a/vendor/magento/module-quote/Model/QuoteManagement.php b/vendor/magento/module-quote/Model/QuoteManagement.php
index 3a81341e2b0..b0aef022dcd 100644
--- a/vendor/magento/module-quote/Model/QuoteManagement.php
+++ b/vendor/magento/module-quote/Model/QuoteManagement.php
@@ -24,7 +24,7 @@ use Magento\Sales\Api\OrderManagementInterface as OrderManagement;
 use Magento\Store\Model\StoreManagerInterface;

 /**
- * Class QuoteManagement
+ * Class for managing quote
  *
  * @SuppressWarnings(PHPMD.CookieAndSessionMisuse)
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
@@ -250,6 +250,7 @@ class QuoteManagement implements \Magento\Quote\Api\CartManagementInterface

         $quote->setBillingAddress($this->quoteAddressFactory->create());
         $quote->setShippingAddress($this->quoteAddressFactory->create());
+        $quote->setCustomerIsGuest(1);

         try {
             $quote->getShippingAddress()->setCollectShippingRates(true);
